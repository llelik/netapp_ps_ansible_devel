##############################
# Default variables for the integration tests
#      source:
#        volume:
#          percent_snapshot_space: 5                   #ONTAP default
#          space_guarantee:        none
#          read_realloc:           off                 #ONTAP default
#          language:               c.utf_8
#          type:                   rw
#          size_unit:              gb
#          encrypt:                true
#          snapshot_policy:
#            name:                 Prod_snapshot_3_3
#          fractional_reserve:     0                 #ONTAP default
#          security_style:         unix
#          snaplock:
#            type:                 non_snaplock        #??? options: compliance, enterprise, non_snaplock
#          tiering_policy:
#            name:                 none
#          volume_autosize:
#            mode:                 off                 #ONTAP default
#          volume_efficiency:
#              enable_inline_compression: true
#              enable_compression:        true
#              #compression_type:          secondary
#              volume_efficiency:         start
#              policy:                    default
############################

---
- name: Set naming facts - Assign everything
  no_log: true
  ansible.builtin.set_fact:
    # the next 2 lines are for the certificate based authentication
    # we assume the certificate is in the format of clustername___username (with .key and .ctr extensions)
    netapp_api_certificate_base: "{{ playbook_dir }}/{{ vars_defaults.config.api_certificate_folder | default('api_certificates') }}/{{ cluster.name | default('') }}___{{ vars_defaults.config.api_username | default('api_user') }}"
    netapp_api_use_certificate : "{{ vars_defaults.config.api_use_certificate           | default(false) }}"
    netapp_hostname            : "{{ cluster.management_ip  | default(ansible_host) }}"
    netapp_username            : "{{ ontap_username }}"
    netapp_password            : "{{ ontap_password }}"

  # here we set the authentication object (can be user/pw or certificate)
- name: Set naming facts - authentication
  no_log: true
  ansible.builtin.set_fact:
    auth_rest: "{{ netapp_hostname | netapp_ps.maf.auth_rest(netapp_username,netapp_password,netapp_api_certificate_base,netapp_api_use_certificate) }}"

- ansible.builtin.set_fact:
    auth: &auth
      username: "{{ auth_rest.username | default(omit) }}"
      password: "{{ auth_rest.password | default(omit) }}"
      key_filepath: "{{ auth_rest.key_filepath | default(omit) }}"
      cert_filepath: "{{ auth_rest.cert_filepath | default(omit) }}"
      validate_certs: "{{ auth_rest_validate_certs | default(false) }}"
      use_rest: always
  no_log: "{{ nolog }}"

- name: Get vars
  ansible.builtin.set_fact:
    src_cluster: "{{ 'cluster'  | netapp_ps.maf.merge_vars(d=vars_defaults,t=vars_templates,v=vars_local,o=vars_overrides,c='source') }}"
    src_svm:     "{{ 'svm'      | netapp_ps.maf.merge_vars(d=vars_defaults,t=vars_templates,v=vars_local,o=vars_overrides,c='source') }}"
    src_volume:  "{{ 'volume'   | netapp_ps.maf.merge_vars(d=vars_defaults,t=vars_templates,v=vars_local,o=vars_overrides,c='source') }}"
    src_qtree:   "{{ 'qtree'    | netapp_ps.maf.merge_vars(d=vars_defaults,t=vars_templates,v=vars_local,o=vars_overrides,c='source') }}"
    src_e_policy: "{{ 'export_policy' | netapp_ps.maf.merge_vars(d=vars_defaults,t=vars_templates,v=vars_local,o=vars_overrides,c='source') }}"
    dst_volume:  "{{ 'volume'   | netapp_ps.maf.merge_vars(d=vars_defaults,t=vars_templates,v=vars_local,o=vars_overrides,c='destination') }}"
    dst_svm:     "{{ 'svm'      | netapp_ps.maf.merge_vars(d=vars_defaults,t=vars_templates,v=vars_local,o=vars_overrides,c='destination') }}"
    dst_cluster: "{{ 'cluster'  | netapp_ps.maf.merge_vars(d=vars_defaults,t=vars_templates,v=vars_local,o=vars_overrides,c='destination') }}"
  no_log: "{{ nolog }}"

- name: "Tests: Collect source cluster info - qtree"
  netapp.ontap.na_ontap_rest_info:
    <<: *auth
    use_python_keys: yes
    gather_subset:
      - qtree_info
    parameters:
      name: "{{ src_qtree.name }}"
      volume.name: "{{ src_volume.name }}"
    hostname: "{{ src_cluster.management_ip }}"
  register: src_qt_info
  no_log: "{{ nolog }}"

- name: "Tests: Collect source cluster info - volume"
  netapp.ontap.na_ontap_rest_info:
    <<: *auth
    use_python_keys: yes
    gather_subset:
      - volume_info
    parameters:
      name: "{{ src_volume.name }}"
    fields:
      - svm.name
      - name
      - type
      - snapshot_policy.name
      - space.fractional_reserve
      - guarantee.type
      - snaplock
      - space.snapshot.reserve_percent
      - tiering.policy
      #- read_realloc # no REST API implementation
      - language
      - nas.security_style
      - autosize.mode
      - efficiency.policy.name
      - encryption
    hostname: "{{ src_cluster.management_ip }}"
  register: src_vol_info
  no_log: "{{ nolog }}"

- name: "Tests: Collect source cluster info - Export policy"
  netapp.ontap.na_ontap_rest_info:
    <<: *auth
    use_python_keys: yes
    gather_subset:
      - export_policy_info
    parameters:
      name:     "{{ src_e_policy.name }}"
      svm.name: "{{ src_svm.name }}"
    hostname:   "{{ src_cluster.management_ip }}"
  register: src_ep_info
  no_log: "{{ nolog }}"

- name: "Tests: Collect source cluster info - dest volume"
  netapp.ontap.na_ontap_rest_info:
    <<: *auth
    use_python_keys: yes
    gather_subset:
      - volume_info
    fields:
      - svm.name
      - name
      - type
      - snaplock
      - encryption   
    parameters:
      name: "{{ dst_volume.name }}"
    hostname: "{{ dst_cluster.management_ip }}"
  register: dst_vol_info
  no_log: "{{ nolog }}"
  when: 
    - vars_local.destination is defined

- name: "Tests: Collect source cluster info - snapmirror"
  netapp.ontap.na_ontap_rest_info:
    <<: *auth
    use_python_keys: yes
    gather_subset:
      - snapmirror_info
    fields:
      - state
      - source
      - destination
    parameters:
      source.path:      "{{ src_svm.name }}:{{ src_volume.name }}"
      destination.path: "{{ dst_svm.name }}:{{ dst_volume.name }}"
    hostname: "{{ dst_cluster.management_ip }}"
  register: sm_info
  no_log: "{{ nolog }}"
  when: 
    - vars_local.snapmirror is defined

# values checked against the defaults and local values
- name: "Tests: Assert source volume has default parameters set up"
  ansible.builtin.assert:
    that:
      - src_qt_info.ontap_info.storage_qtrees.num_records                                  == 1 # 1 == exists
      - src_vol_info.ontap_info.storage_volumes.num_records                                == 1 # 1 == exists
      - src_ep_info.ontap_info.protocols_nfs_export_policies.num_records                   == 1 # 1 == exists 
      - src_vol_info.ontap_info.storage_volumes.records[0].guarantee.type                  | lower == vars_defaults.source.volume.space_guarantee               # 'none'
      - src_vol_info.ontap_info.storage_volumes.records[0].space.snapshot.reserve_percent  | int == vars_defaults.source.volume.percent_snapshot_space | int    # 5
      - src_vol_info.ontap_info.storage_volumes.records[0].snapshot_policy.name            == vars_local.source.volume.snapshot_policy.name                     # 'Prod_snapshot_3_3' or none
      - src_vol_info.ontap_info.storage_volumes.records[0].language                        | lower == vars_defaults.source.volume.language                      # 'c.utf_8'
      - src_vol_info.ontap_info.storage_volumes.records[0].nas.security_style              | lower == vars_defaults.source.volume.security_style                # 'unix'
      - src_vol_info.ontap_info.storage_volumes.records[0].type                            | lower == vars_defaults.source.volume.type                          # 'rw'
      - src_vol_info.ontap_info.storage_volumes.records[0].tiering.policy                  == vars_defaults.source.volume.tiering_policy.name                   # 'none'
      - src_vol_info.ontap_info.storage_volumes.records[0].autosize.mode                   | lower == vars_defaults.source.volume.volume_autosize.mode          # 'off'
      - src_vol_info.ontap_info.storage_volumes.records[0].efficiency.policy.name          == vars_defaults.source.volume.volume_efficiency.policy              # default
      - src_vol_info.ontap_info.storage_volumes.records[0].encryption.enabled              == vars_defaults.source.volume.encrypt | bool
    msg: "One or more of the default volume parameters are not set on the source volume. Please check the configuration."
    quiet: true
  ignore_errors: true
  register: assert_result_0
  

- set_fact:
    all_assertions: "{{ all_assertions | default([]) + [True if not assert_result_0.failed else False] }}"

- name: "Tests: Assert destination and snapmirror objects are present"
  ansible.builtin.assert:
    that:
      - dst_vol_info.ontap_info.storage_volumes.records[0].name                 == dst_volume.name
      - sm_info.ontap_info.snapmirror_relationships.records[0].source.path      == src_svm.name + ':' + src_volume.name
      - sm_info.ontap_info.snapmirror_relationships.records[0].destination.path == dst_svm.name + ':' + dst_volume.name
      - dst_vol_info.ontap_info.storage_volumes.num_records                     == 1 # 1 == exists
      - sm_info.ontap_info.snapmirror_relationships.num_records                 == 1 # 1 == exists
      - sm_info.ontap_info.snapmirror_relationships.records[0].state | lower    in ['snapmirrored', 'initializing', 'transferring']
    msg: "One or more of the destination or snapmirror objects not found on the destination cluster. Please check the configuration."
    quiet: true
  ignore_errors: true
  when: 
    - vars_local.destination is defined
    - vars_local.snapmirror is defined
  register: assert_result_1

- set_fact:
    all_assertions: "{{ all_assertions | default([]) + [True if not assert_result_1.failed else False] }}"
  when: 
    - vars_local.destination is defined
    - vars_local.snapmirror is defined

# Snaplock volume configuration values checked against the input values when input_snaplock=false
- name: "Tests: Assert Volume Snaplock type setup for non_snaplock volume"
  ansible.builtin.assert:
    that:
      - src_vol_info.ontap_info.storage_volumes.records[0].snaplock.type              | lower == src_volume.snaplock.type              | lower                # is set as in local vars
    msg: "Snaplock type is not set as expected. Please check the configuration."
    quiet: true
  ignore_errors: true
  when: src_volume.snaplock.type == 'non_snaplock'
  register: assert_result_2

- set_fact:
    all_assertions: "{{ all_assertions | default([]) + [True if not assert_result_2.failed else False] }}"
  when: src_volume.snaplock.type == 'non_snaplock'

# Snaplock volume configuration values checked against the input values when input_snaplock=true
- name: "Tests: Assert Volume Snaplock setup for snaplock volume"
  ansible.builtin.assert:
    that:
      - src_vol_info.ontap_info.storage_volumes.records[0].snaplock.type              | lower == src_volume.snaplock.type              | lower                # is set as in local vars
      - src_vol_info.ontap_info.storage_volumes.records[0].snaplock.autocommit_period | lower == src_volume.snaplock.autocommit_period | lower                # is set as in local vars
      - src_vol_info.ontap_info.storage_volumes.records[0].snaplock.retention.default | lower == src_volume.snaplock.retention.default | lower                # is set as in local vars
      - src_vol_info.ontap_info.storage_volumes.records[0].snaplock.retention.minimum | lower == src_volume.snaplock.retention.minimum | lower                # is set as in local vars
      - src_vol_info.ontap_info.storage_volumes.records[0].snaplock.retention.maximum | lower == src_volume.snaplock.retention.maximum | lower                # is set as in local vars
      - src_vol_info.ontap_info.storage_volumes.records[0].snaplock.autocommit_period | lower == src_volume.snaplock.autocommit_period | lower                # is set as in local vars
    msg: "Snaplock type is not set as expected. Please check the configuration."
    quiet: true
  ignore_errors: true
  when: 
    - src_volume.snaplock.type != 'non_snaplock'
  register: assert_result_3

- set_fact:
    all_assertions: "{{ all_assertions | default([]) + [True if not assert_result_3.failed else False] }}"
  when: 
    - src_volume.snaplock.type != 'non_snaplock'

- debug: var=all_assertions

...