---
# tasks file for svm_clone_get_subset
- name: Set connection details source
  ansible.builtin.set_fact:
    src_auth:           &src_auth
      username:         "{{ s_cluster.username }}"
      password:         "{{ s_cluster.password }}"
      hostname:         "{{ s_cluster.hostname }}"
      validate_certs:   false
      use_rest:         Always
  no_log: true

- debug:
    msg: "Configuration to be collected from: {{ api_path_request }}"

- name: Read SVM source info items
  netapp.ontap.na_ontap_rest_info:
    <<:                 *src_auth
    gather_subset:      "{{ config_api_paths[api].path }}"
    fields:             "{{ config_api_paths[api].fields }}"
    parameters:
      svm.name:         "{{ source_cluster.svm }}"
  loop: "{{ api_path_request }}"
  loop_control:
    loop_var: api
  register: svm_config_info

- debug: var=svm_config_info

# for ease of debugging, we will remove the uuid and _links from the results
# this is not needed for the rest of the playbook
# this is done to make the output more readable
- name: Render clean ONTAP facts
  set_fact:
    clean_ontap_facts: "{{ svm_config_info | to_json | netapp_ps.ontap_specials.remove_keys(['uuid', '_links'])  }}"

- name: Split results for categories
  set_fact:
    svm_read_data: "{{ 
                    svm_read_data | default({}) | combine(
                        { cfg_item: (clean_ontap_facts.results | selectattr('api', 'equalto', cfg_item))[0].ontap_info[config_api_paths[cfg_item].path].records | default([])}
                    )
                    }}"
  loop: "{{ api_path_request }}"
  loop_control:
    loop_var: cfg_item

- debug: var=svm_read_data

- name: Render local vars from APIs response on source
  set_fact:
    vars_local:
      clone_source: "{{ lookup('template', 'locals.j2') | from_yaml  }}"
- debug: var=vars_local
#- fail: msg=STOP
